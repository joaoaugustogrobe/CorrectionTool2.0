version: '3.7'
services:

  p_proxy:
    container_name: p_proxy
    build:
      context: "./env/prod/proxy"
      args:
        server_name_arg: ${NGINX_SERVER_NAME:-joaocastilho.com.br}
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - p_spa
      - p_api
    volumes:
      - ./env/prod/proxy/certbot/data:/etc/letsencrypt
      - ./env/prod/proxy/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./env/prod/proxy/certbot/data:/etc/letsencrypt
      - ./env/prod/proxy/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"



  p_web:
    container_name: "p_web"
    build:
      context: "./env/prod/api"
      dockerfile: web.Dockerfile
    working_dir: /var/www

  p_spa:
    container_name: 'p_spa'
    build:
      context: "./env/prod/spa"

  p_rabbitmq:
    image: rabbitmq:3-management
    container_name: 'p_rabbitmq'
    restart: always
    ports:
      - ${RABBITMQ_PORT:-5672}:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_USERNAME:-root}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_PASSWORD:-example}"
    volumes:
      - p_rabbitmq_data:/var/lib/rabbitmq/
      - p_rabbitmq_log:/var/log/rabbitmq/
    networks:
      - rabbitmq_go_net
      - default


  p_api:
    container_name: 'p_api'
    build:
      context: "./env/prod/api/"
      dockerfile: api.Dockerfile
    ports:
      - "${API_PORT:-8092}:3333"
    volumes:
      - type: bind
        source: ./api
        target: /var/www
      - type: bind
        source: ./api/uploads
        target: /usr/local/Exercicios
    environment:
      QUEUE_HOST: p_rabbitmq
      NODE_ENV: production
      DB_USERNAME: "${MONGO_INITDB_ROOT_USERNAME:-root}"
      DB_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD:-example}"
      DB_DATABASE: "${MONGO_INITDB_DATABASE:-correctiontool}"
      DB_HOST: p_mongo
      DB_PORT: 27017
      RABBITMQ_USERNAME: "${RABBITMQ_USERNAME:-root}"
      RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD:-example}"
      RABBITMQ_HOST: ${RABBITMQ_HOST:-p_rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      API_ADMIN_EMAIL: ${API_ADMIN_EMAIL:-admin@joaocastilho.com.br}
      API_ADMIN_PASSWORD: ${API_ADMIN_PASSWORD:-example}
    working_dir: /var/www
    command: "npm run prod"
    restart: always
    depends_on:
      - p_rabbitmq
      - p_mongo


  p_corretor:
    container_name: 'p_corretor'
    build:
      context: "./env/prod/corretor"
    depends_on:
      - p_rabbitmq
      - p_mongo
      - p_api
    environment:
      RABBITMQ_USERNAME: "${RABBITMQ_USERNAME:-root}"
      RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD:-example}"
      RABBITMQ_HOST: ${RABBITMQ_HOST:-p_rabbitmq}
      RABBITMQ_PORT: ${RABBITMQ_PORT:-5672}
      SERVER_BASE_URL: "${SERVER_BASE_URL:-joaocastilho.com.br/api}"
      API_ADMIN_EMAIL: ${API_ADMIN_EMAIL:-admin@joaocastilho.com.br}
      API_ADMIN_PASSWORD: ${API_ADMIN_PASSWORD:-example}
    volumes:
      - type: bind
        source: ./corretor
        target: /var/www
      - type: bind
        source: ./corretor/temp
        target: /usr/local/Exercicios
    working_dir: /var/www
    command: "npm run prod"

  p_mongo:
    build: ./env/prod/mongo
    container_name: 'p_monogo'
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME:-root}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD:-example}"
      MONGO_INITDB_DATABASE: "${MONGO_INITDB_DATABASE:-correctiontool}"
    volumes:
      - type: bind
        source: ./env/prod/mongo/mongo-init.js
        target: /docker-entrypoint-initdb.d/mongo-init.js
      - p_mongodata:/data/db #Helps to store MongoDB data in `./mongo/data`
      #- ./env/dev/mongo/seed.js:/docker-entrypoint-initdb.d/init-mongo-js:ro
      #- ./env/dev/mongo/seed.js:/docker-entrypoint-initdb.d/seed.js:ro
    ports:
      - 27017:27017

volumes:
  p_mongodata:
  p_rabbitmq_data:
  p_rabbitmq_log:

networks:
  rabbitmq_go_net:
    driver: bridge